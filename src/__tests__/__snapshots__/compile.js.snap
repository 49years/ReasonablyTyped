// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Compile duplicate-type.re 1`] = `
"type union_of_number_or_string =
  | Number float
  | String string;

type number_or_string;

external number_or_string : union_of_number_or_string => number_or_string =
  \\"Array.prototype.shift.call\\" [@@bs.val];

external add : x::number_or_string => float = \\"\\" [@@bs.module \\"duplicate-type\\"];

external sub : x::number_or_string => float = \\"\\" [@@bs.module \\"duplicate-type\\"];
"
`;

exports[`Compile duplicate-type-param.re 1`] = `
"type union_of_number_or_string =
  | Number float
  | String string;

type number_or_string;

external number_or_string : union_of_number_or_string => number_or_string =
  \\"Array.prototype.shift.call\\" [@@bs.val];

external add : x::number_or_string => y::number_or_string => float =
  \\"\\" [@@bs.module \\"duplicate-type-param\\"];
"
`;

exports[`Compile interface.re 1`] = `
"type options = Js.t {. op : string};

external apply : x::float => y::float => options::options? => unit => float =
  \\"\\" [@@bs.module \\"interface\\"];
"
`;

exports[`Compile numbers.re 1`] = `
"external xfg : float = \\"\\" [@@bs.module \\"numbers\\"];

external add : a::float => b::float => float = \\"\\" [@@bs.module \\"numbers\\"];
"
`;

exports[`Compile numbers.re 2`] = `
"external xfg : float = \\"\\" [@@bs.module \\"numbers\\"];

external add : a::float => b::float => float = \\"\\" [@@bs.module \\"numbers\\"];
"
`;

exports[`Compile object-type.re 1`] = `
"type subscribeOptions = Js.t {. start : float, stop : float};

type testOptions = Js.t {. method : string, subscribe : subscribeOptions};

external test : options::testOptions => string = \\"\\" [@@bs.module \\"object-type\\"];
"
`;

exports[`Compile optional-param.re 1`] = `
"external add : x::float => y::float? => unit => float = \\"\\" [@@bs.module \\"optional\\"];
"
`;

exports[`Compile simple.re 1`] = `
"external add : x::float => y::float => float = \\"\\" [@@bs.module \\"simple\\"];
"
`;

exports[`Compile simple-class.re 1`] = `
"type test = Js.t {. action : a::float => string [@bs.meth]};

external create_test : t::string => test =
  \\"Test\\" [@@bs.new] [@@bs.module \\"simple-class\\"];
"
`;

exports[`Compile type-decl.re 1`] = `
"type stringOptions = Js.t {. value : string};

external test : s::string => options::stringOptions => string =
  \\"\\" [@@bs.module \\"type-decl\\"];
"
`;

exports[`Compile union-type.re 1`] = `
"type union_of_number_or_string =
  | Number float
  | String string;

type number_or_string;

external number_or_string : union_of_number_or_string => number_or_string =
  \\"Array.prototype.shift.call\\" [@@bs.val];

external double : x::number_or_string => float = \\"\\" [@@bs.module \\"union-type\\"];
"
`;
