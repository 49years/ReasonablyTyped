// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Compile duplicate-type.re 1`] = `
"type union_of_number_or_string =
  | Number float
  | String string;

type number_or_string;

external number_or_string : union_of_number_or_string => number_or_string =
  \\"Array.prototype.shift.call\\" [@@bs.val];

external add : x::number_or_string => float = \\"\\" [@@bs.module \\"duplicate-type\\"];

external sub : x::number_or_string => float = \\"\\" [@@bs.module \\"duplicate-type\\"];
"
`;

exports[`Compile duplicate-type-param.re 1`] = `
"type union_of_number_or_string =
  | Number float
  | String string;

type number_or_string;

external number_or_string : union_of_number_or_string => number_or_string =
  \\"Array.prototype.shift.call\\" [@@bs.val];

external add : x::number_or_string => y::number_or_string => float =
  \\"\\" [@@bs.module \\"duplicate-type-param\\"];
"
`;

exports[`Compile generics.re 1`] = `
"type thing 'x = Js.t {. lst : array 'x};

module Adder = {
  type t 'x = Js.t {. add : ('x => 'x) [@bs.meth]};
  external make : 'x => t 'x = \\"Adder\\" [@@bs.new] [@@bs.module \\"generics\\"];
};

type subOpts 'm 'n = Js.t {. m : 'm, n : Adder.t 'n};
"
`;

exports[`Compile interface.re 1`] = `
"type options = Js.t {. op : string};

external apply : x::float => y::float => options::options? => unit => float =
  \\"\\" [@@bs.module \\"interface\\"];
"
`;

exports[`Compile multiple-modules.re 1`] = `
"external someTopLevel : unit => unit = \\"\\" [@@bs.module \\"multiple-modules\\"];

module First = {
  external first : unit => float = \\"\\" [@@bs.module \\"multiple-modules/first\\"];
  external second : unit => unit = \\"\\" [@@bs.module \\"multiple-modules/first\\"];
};

module Second = {
  external second : unit => string = \\"\\" [@@bs.module \\"multiple-modules/second\\"];
  external third : unit => unit = \\"\\" [@@bs.module \\"multiple-modules/second\\"];
};

module Third = {
  external third : unit => string = \\"\\" [@@bs.module \\"multiple-modules/third\\"];
  external fourth : unit => unit = \\"\\" [@@bs.module \\"multiple-modules/third\\"];
};

module ThirdInner = {
  external third : unit => string = \\"\\" [@@bs.module \\"multiple-modules/third/inner\\"];
  external fourth : unit => unit = \\"\\" [@@bs.module \\"multiple-modules/third/inner\\"];
};
"
`;

exports[`Compile numbers.re 1`] = `
"external xfg : float = \\"\\" [@@bs.module \\"numbers\\"];

external add : a::float => b::float => float = \\"\\" [@@bs.module \\"numbers\\"];
"
`;

exports[`Compile numbers.re 2`] = `
"external xfg : float = \\"\\" [@@bs.module \\"numbers\\"];

external add : a::float => b::float => float = \\"\\" [@@bs.module \\"numbers\\"];
"
`;

exports[`Compile object-type.re 1`] = `
"type subscribeOptions = Js.t {. start : float, stop : float};

type testOptions = Js.t {. method : string, subscribe : subscribeOptions};

external test : options::testOptions => string = \\"\\" [@@bs.module \\"object-type\\"];
"
`;

exports[`Compile optional-param.re 1`] = `
"external add : x::float => y::float? => unit => float = \\"\\" [@@bs.module \\"optional\\"];
"
`;

exports[`Compile promise.re 1`] = `
"external pOfString : unit => Js_promise.t string = \\"\\" [@@bs.module \\"promise\\"];

external pOfNumber : unit => Js_promise.t float = \\"\\" [@@bs.module \\"promise\\"];

external pOfArray : unit => Js_promise.t (array string) = \\"\\" [@@bs.module \\"promise\\"];

external pOfVoid : unit => Js_promise.t unit = \\"\\" [@@bs.module \\"promise\\"];

external argPromise : p::Js_promise.t string => unit = \\"\\" [@@bs.module \\"promise\\"];

external listOfPromises : unit => array (Js_promise.t string) =
  \\"\\" [@@bs.module \\"promise\\"];

external somePromise : Js_promise.t (array float) = \\"\\" [@@bs.module \\"promise\\"];
"
`;

exports[`Compile simple.re 1`] = `
"external add : x::float => y::float => float = \\"\\" [@@bs.module \\"simple\\"];
"
`;

exports[`Compile simple-class.re 1`] = `
"module Test = {
  type t = Js.t {. action : (float => string) [@bs.meth]};
  external make : string => t = \\"Test\\" [@@bs.new] [@@bs.module \\"simple-class\\"];
};
"
`;

exports[`Compile spread-args.re 1`] = `
"external foo : bars::array float => unit = \\"\\" [@@bs.module \\"spread-args\\"] [@@bs.splice];

external optFoo : bars::array float => unit =
  \\"\\" [@@bs.module \\"spread-args\\"] [@@bs.splice];

external bothFoo : anArg::string => bars::array float => unit =
  \\"\\" [@@bs.module \\"spread-args\\"] [@@bs.splice];

external bothOptFoo : anArg::string => bars::array float => unit =
  \\"\\" [@@bs.module \\"spread-args\\"] [@@bs.splice];

external soManyOpts : anArg::string? => unit => bars::array float => unit =
  \\"\\" [@@bs.module \\"spread-args\\"] [@@bs.splice];

external returns : anArg::string => bars::array float => float =
  \\"\\" [@@bs.module \\"spread-args\\"] [@@bs.splice];

external multipleLists : foos::array float => bars::array float => unit =
  \\"\\" [@@bs.module \\"spread-args\\"] [@@bs.splice];
"
`;

exports[`Compile type-decl.re 1`] = `
"type stringOptions = Js.t {. value : string};

external test : s::string => options::stringOptions => string =
  \\"\\" [@@bs.module \\"type-decl\\"];
"
`;

exports[`Compile union-type.re 1`] = `
"type union_of_number_or_string =
  | Number float
  | String string;

type number_or_string;

external number_or_string : union_of_number_or_string => number_or_string =
  \\"Array.prototype.shift.call\\" [@@bs.val];

external double : x::number_or_string => float = \\"\\" [@@bs.module \\"union-type\\"];
"
`;

exports[`Compile void-func.re 1`] = `
"external voidFunc : unit => unit = \\"\\" [@@bs.module \\"void-func\\"];
"
`;
